" Tabbing and number setup
set number
set tabstop=2
set shiftwidth=4
set expandtab
set autoindent

" Paste between multiple instances
set clipboard=unnamed

" Theme and color setup
set term=screen-256color
colorscheme spring-night
set bg=dark
highlight LineNr ctermfg=grey ctermbg=238
let g:airline_theme='bubblegum'

" Search settings
set ignorecase
set smartcase
set hlsearch
set incsearch
hi search cterm=NONE ctermfg=black ctermbg=LightBlue
hi incsearch cterm=NONE ctermfg=black ctermbg=LightBlue

" Other handy vim settings
set scrolloff=2

" Highlight lines that go over 80 characters long
"highlight OverLength ctermbg=red ctermfg=white guibg=#592929
"match OverLength /\%81v.\+/

" Vim-Plug and plugins
call plug#begin('~/.vim/plugged')

Plug 'scrooloose/syntastic'
Plug 'scrooloose/nerdcommenter'
Plug 'yggdroot/indentline'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'sickill/vim-pasta'
Plug 'edkolev/tmuxline.vim'
Plug 'tpope/vim-fugitive'
Plug 'valloric/youcompleteme'

call plug#end()

" Plugin Settings
"    tmuxline settings
let g:airline#extensions#tmuxline#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1

" Syntastic settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_cpp_compiler = "g++"
let g:syntastic_cpp_remove_include_errors = 1
let g:syntastic_cpp_check_header = 1
let g:syntastic_cpp_checkers = ['cppcheck']
let g:syntastic_cpp_cppcheck_args="--enable=all"
let g:syntastic_cloudformation_checkers = ['cfn_lint']

let g:syntastic_ptyhon_checkers = ['pylint']
let g:syntastic_ptyhon_pylint_post_args="--max-line-length=200"

let g:syntastic_yaml_checkers = ['yamllint']

" Filetype settings
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType yml setlocal ts=2 sts=2 sw=2 expandtab

" Key bindings
nmap <CR> o<Esc>
imap jj <Esc>
map <F6> :make<CR>
" Reindent entire file and remove trailing whitespace with F12
nnoremap <F12> magg=G:let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar><CR>'a

" Set up persistent undo/redo
let vimDir = '$HOME/.vim'
let &runtimepath.=','.vimDir
if has('persistent_undo')
    let myUndoDir = expand(vimDir . '/undodir')
    " Create dirs
    call system('mkdir ' . vimDir)
    call system('mkdir ' . myUndoDir)
    let &undodir = myUndoDir
    set undofile
endif

