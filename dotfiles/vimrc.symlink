" Tabbing and number setup
set number
set tabstop=2
set shiftwidth=4
set expandtab
set autoindent

" Paste between multiple instances
set clipboard=unnamed

" Theme and color setup
set term=screen-256color
colorscheme spring-night
set bg=dark
highlight LineNr ctermfg=grey ctermbg=238
let g:airline_theme='bubblegum'

" Search settings
set ignorecase
set smartcase
set hlsearch
set incsearch
hi search cterm=NONE ctermfg=black ctermbg=LightBlue
hi incsearch cterm=NONE ctermfg=black ctermbg=LightBlue

" Other handy vim settings
set scrolloff=2

" Highlight lines that go over 80 characters long
"highlight OverLength ctermbg=red ctermfg=white guibg=#592929
"match OverLength /\%81v.\+/

" Vim-Plug and plugins
call plug#begin('~/.vim/plugged')

Plug 'scrooloose/syntastic'            " Syntastic syntax checker
Plug 'scrooloose/nerdcommenter'        " Easy commenting of single/multi line sections
Plug 'yggdroot/indentline'             " Display indent level with vertical lines
Plug 'vim-airline/vim-airline'         " Improved status bar and tracking
Plug 'vim-airline/vim-airline-themes'  " Theme support for status bar
Plug 'edkolev/tmuxline.vim'            " TMUX status line generator
Plug 'valloric/youcompleteme'          " Code completion engine support
Plug 'speshak/vim-cfn'                 " Cfn-lint support/highlighting for syntastic

call plug#end()

" Plugin Settings
"    tmuxline settings
let g:airline#extensions#tmuxline#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1

" Syntastic settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" Recommended settings by syntastic
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" C++ syntastic settings
let g:syntastic_cpp_compiler = "g++"
let g:syntastic_cpp_check_header = 1
let g:syntastic_cpp_checkers = ['cppcheck', 'cpplint', 'clang-check']
let g:syntastic_cpp_cppcheck_args="--enable=all"
let g:syntastic_cpp_cpplint_exec = "cpplint"
let g:syntastic_cpp_cpplint_args = "--verbose=2 --linelength=150 --filter=-legal/copyright"

" other syntastic settings
let g:syntastic_cloudformation_checkers = ['cfn-lint']
let g:syntastic_python_checkers = ['pylint']
let g:syntastic_python_pylint_post_args="--max-line-length=200"
let g:syntastic_yaml_checkers = ['yamllint', 'cfn-lint']

let g:ycm_show_diagnostics_ui = 0

" Filetype settings
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType yml setlocal ts=2 sts=2 sw=2 expandtab

" Key bindings
nmap <CR> o<Esc>
imap jj <Esc>
map <F6> :make<CR>
" Reindent entire file and remove trailing whitespace with F12
nnoremap <F12> magg=G:let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar><CR>'a

" Set up persistent undo/redo
let vimDir = '$HOME/.vim'
let &runtimepath.=','.vimDir
if has('persistent_undo')
    let myUndoDir = expand(vimDir . '/undodir')
    " Create dirs
    call system('mkdir ' . vimDir)
    call system('mkdir ' . myUndoDir)
    let &undodir = myUndoDir
    set undofile
endif

